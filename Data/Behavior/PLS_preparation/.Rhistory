df$GeodesicElongation <- df$GeodesicDiameter_Pixel^2 / df$Area_Pixel2
df$AspectRatio <- df$LargestInscribedCircleRadius_Pixel^2 / df$Area_Pixel2
df$Circularity <- df$Area_Pixel2 / df$Perimeter_Pixel^2
df$Somaness <- df$RadiusAtBrightestPoint_Pixel^2 / df$Area_Pixel2
df$Branchiness <- df$SkeletonNumBranchPoints / df$GeodesicDiameter_Pixel
df$Straightness <- df$SkeletonLongestBranchLength_Pixel^2 / df$Area_Pixel2
df$Thickness <- df$Area_Pixel2 / df$SkeletonTotalLength_Pixel^2
return(df)
}
# Data clean up:
# - Remove empty rows
# - Remove duplicated cells
# - Remove cells touching the image border
# - Remove cells not annotated with expected terms
clean_up <- function(df) {
# Remove empty rows
df <- df[df$Object_Label!="",]
# Remove duplicated cells
duplicates <- duplicated(df[,c("Centroid_Time_Frames", "BrightestPoint_X_Pixel", "BrightestPoint_Y_Pixel", "Path_Intensities")])
if(any(duplicates)) {
warning(paste0("Removing duplicates in ", paste(unique(df$Path_Intensities[duplicates]), collapse = ", "), "\n"))
df <- df[!duplicates,]
}
# Remove cells that significantly touch the image border
# A cell touches the border if the number of pixels on the border is more than 1% of its perimeter
excluded.cells <- which(df$ImageBoundaryContact_Pixel>0.01*df$Perimeter_Pixel)
if(length(excluded.cells)>0){
df <- df[-excluded.cells,]
}
# Remove unexpected annotations
df$Morphology[is.na(df$Morphology)] <- 'Not annotated' # NA -> not annotated
idx <- which(!(df$Morphology %in% c(classes, 'Not annotated')))
if(length(idx)>0) { # Cells with unexpected terms are considered not annotated
df$Morphology[idx] <- 'Not annotated'
}
return(df)
}
# Read treatment info
info <- read.delim(treatment.info.file, header = TRUE, sep = '\t')
# Remove empty rows
info <- info[!apply(is.na(info) | info == "", 1, all),]
info <- split(info, info$Treatment)
controls <- paste0(info$Control[,1], '_', info$Control[,2])
nmda <- paste0(info$NMDA[,1], '_', info$NMDA[,2])
lps <- paste0(info$'NMDA+LPS'[,1], '_', info$'NMDA+LPS'[,2])
# Read the multiple data files
# This will read all csv/txt files in the data.dir
file.list <- list.files(data.dir, pattern = ".*\\.(csv|txt)$", full.names = TRUE, recursive = FALSE)
data <- NULL
# Collect data for all the experiments
for(i in 1:length(file.list)) {
ID <- file.list[i]
df <- read.table(file.list[i], sep = "\t", header = TRUE, stringsAsFactors = FALSE)
df <- df[!is.na(df$Object_Label),]
if(i == 1) {
data <- df
} else {
clns <- colnames(df)[which(!(colnames(df) %in% colnames(data)))]
if(length(clns)>0) {
stop(paste0("File ", file.list[i], " has different column names than previous data files.\n Check the following column(s): ", clns, "\n"))
}
clns2 <-  colnames(data)[which(!colnames(data) %in% colnames(df))]
if(length(clns2)>0) {
warning(paste0("File ", file.list[i], " is missing the following column(s): ", paste(clns2, collapse = ", "), "\nFilling missing columns with NA.\n"))
df[,clns2] <- NA
}
data <- rbind(data, df)
}
}
# Collect data for all the experiments
for(i in 1:length(file.list)) {
ID <- file.list[i]
df <- read.table(file.list[i], sep = "\t", header = TRUE, stringsAsFactors = FALSE)
df <- df[!is.na(df$Object_Label),]
if(i == 1) {
data <- df
} else {
clns <- colnames(df)[which(!(colnames(df) %in% colnames(data)))]
if(length(clns)>0) {
stop(paste0("File ", file.list[i], " has different column names than previous data files.\n Check the following column(s): ", clns, "\n"))
}
clns2 <-  colnames(data)[which(!colnames(data) %in% colnames(df))]
if(length(clns2)>0) {
warning(paste0("File ", file.list[i], " is missing the following column(s): ", paste(clns2, collapse = ", "), "\nFilling missing columns with NA.\n"))
df[,clns2] <- NA
}
data <- rbind(data, df)
}
}
# Make annotation column last
data <- data[, c(which(colnames(data) != "Morphology"), which(colnames(data) == "Morphology"))]
# Fix a few things
data <- clean_up(data)
# Fix a few things
data <- clean_up(data)
# Compute derived features
data <- compute_derived_features(data)
# Save all data as one file including derived features
write.table(data, file = file.path(output.dir, data.file), sep = "\t", quote = FALSE, col.names = TRUE, row.names = FALSE)
# Collect data for all the experiments
for(i in 1:length(file.list)) {
ID <- file.list[i]
df <- read.table(file.list[i], sep = "\t", header = TRUE, stringsAsFactors = FALSE)
df <- df[!is.na(df$Object_Label),]
if(i == 1) {
data <- df
} else {
clns <- colnames(df)[which(!(colnames(df) %in% colnames(data)))]
if(length(clns)>0) {
stop(paste0("File ", file.list[i], " has different column names than previous data files.\n Check the following column(s): ", clns, "\n"))
}
clns2 <-  colnames(data)[which(!colnames(data) %in% colnames(df))]
if(length(clns2)>0) {
warning(paste0("File ", file.list[i], " is missing the following column(s): ", paste(clns2, collapse = ", "), "\nFilling missing columns with NA.\n"))
df[,clns2] <- NA
}
data <- rbind(data, df)
}
}
# Make annotation column last
data <- data[, c(which(colnames(data) != "Morphology"), which(colnames(data) == "Morphology"))]
# Fix a few things
data <- clean_up(data)
# Compute derived features
data <- compute_derived_features(data)
# Save all data as one file including derived features
write.table(data, file = file.path(output.dir, data.file), sep = "\t", quote = FALSE, col.names = TRUE, row.names = FALSE)
# Get annotated training data
train.data <- data[which(data$Morphology %in% classes),]
train.data$Morphology <- as.factor(train.data$Morphology)
train.data <- droplevels(train.data)
# Take only the first time frame except for annotated cells which can be at other time points
data <- data[data$Centroid_Time_Frames == 1 | data$Morphology!='Not annotated',]
feat.to.keep <- feat.to.keep[feat.to.keep!='Centroid_Time_Frames']
# Factors we will look at later
source <- data$Path_Intensities
# Factors we will look at later
source <- data$Path_Intensities
culture <- as.factor(str_match(source, "MAX_(pg\\d+?)[_-]")[,2])
treatment <- str_match(source, "MAX_(pg\\d+?[_-].*?)8h")[,2]
treatment[treatment %in% controls] <- "Control"
treatment[treatment %in% nmda] <- "NMDA"
treatment[treatment %in% lps] <- "NMDA+LPS"
treatment[!(treatment %in% c("Control", "NMDA", "NMDA+LPS"))] <- NA
treatment <- as.factor(treatment)
treatment <- as.factor(treatment)
# Discard non-feature data (but keep class column)
data <- data[,feat.to.keep]
treatment[!(treatment %in% c("Control", "NMDA", "NMDA+LPS"))] <- NA
treatment <- as.factor(treatment)
# Discard non-feature data (but keep class column)
data <- data[,feat.to.keep]
train.data <- train.data[,feat.to.keep]
# Factors we will look at later
source <- data$Path_Intensities
culture <- as.factor(str_match(source, "MAX_(pg\\d+?)[_-]")[,2])
treatment <- str_match(source, "MAX_(pg\\d+?[_-].*?)8h")[,2]
treatment[treatment %in% controls] <- "Control"
treatment[treatment %in% nmda] <- "NMDA"
treatment[treatment %in% lps] <- "NMDA+LPS"
treatment[!(treatment %in% c("Control", "NMDA", "NMDA+LPS"))] <- NA
treatment <- as.factor(treatment)
# Discard non-feature data (but keep class column)
data <- data[,feat.to.keep]
train.data <- train.data[,feat.to.keep]
# Index of the class column
class.col.idx <- which(colnames(data)=="Morphology")
library(uwot)
library(scales)
library(ggplot2)
library(RColorBrewer)
dir.create(file.path(output.dir,"unsupervised"))
n.neighbours <- 15
n.components <- 2
u <- umap(data[,-class.col.idx], scale = TRUE, n_neighbors = n.neighbours, n_components = n.components)
df <- cbind(as.data.frame(u), Morphology = data$Morphology)
n.components
df
# Make unannotated points semi-transparent in plot
is.annotated <- df$Morphology %in% classes
a <- rep(1, length(df$Morphology)) # alpha level for each data point
a[!is.annotated] <- 0.2 # set alpha level of unannotated points
# Reorder the levels so that "Not annotated" appears last in the legend
Morphology <- factor(df$Morphology, levels = c(classes, "Not annotated"))
# Set colour scheme
colours <- brewer.pal(length(classes), "Paired")
colours[length(classes)+1] <- "grey"
names(colours) <- levels(Morphology)
# Check distribution of factors of interest
df <- cbind(df, treatment, culture)
# Plot all data points, highlighting annotations
# pdf(file.path(output.dir, "unsupervised", "UMAP_unsupervised-morphology.pdf"))
# Output tiff file for paper
tiff(file.path(output.dir,"unsupervised","UMAP_unsupervised-morphology.tiff"), width = 7, height = 7, units = "in", res = 600, compression = "lzw")
ggplot(df,aes(x=V1, y=V2, color = Morphology)) +  geom_point(alpha = a) + scale_color_manual(values=colours, breaks = levels(Morphology))
dev.off()
# Check distribution of factors of interest
df <- cbind(df, treatment, culture)
pdf(file.path(output.dir, "unsupervised", "UMAP_unsupervised-treatment.pdf"))
ggplot(df,aes(x=V1, y=V2, color = treatment)) +  geom_point(alpha = 0.5)
ggplot(df,aes(x=V1, y=V2, color = culture)) +  geom_point(alpha = 0.5)
library(uwot)
library(dbscan)
library(scales)
library(ggplot2)
library(reshape2)
library(RColorBrewer)
library(caret)
dir.create(file.path(output.dir,"supervised"))
# Evaluate classifier performance with cross-validation
nfolds <- 5
train.idx <- createDataPartition(y = train.data$Morphology, p = 0.5, times = nfolds)
avg.accuracy <- 0
for(i in 1:length(train.idx)) {
training <- train.data[train.idx[[i]],]
testing <- train.data[-train.idx[[i]],]
# Find projection using training set
u1 <- umap(train.data[,-class.col.idx], y = train.data[, class.col.idx], scale = TRUE, ret_model = TRUE, n_neighbors = n.neighbours, n_components = n.components)
# Project the all annotated data in the new space
u2 <- umap_transform(train.data[,-class.col.idx], u1)
# Extract clusters in UMAP space
dbr <- hdbscan(u2, minPts = n.neighbours)
clusters <- factor(dbr$cluster)
annotations <- train.data$Morphology
noise.idx <- which(dbr$cluster == 0)
if(length(noise.idx)>0) {
clusters <- droplevels(clusters[-noise.idx])
annotations <- annotations[-noise.idx]
df <- df[-noise.idx,]
}
# Find dominant class in each cluster
tb <- table(cluster = clusters, annotations)
levels(clusters) <- colnames(tb)[apply(tb, 1, which.max)]
confusion.matrix <- confusionMatrix(clusters, annotations)
avg.accuracy <- avg.accuracy + confusion.matrix$overall[['Accuracy']]
}
avg.accuracy <- avg.accuracy / nfolds
print(paste0("Average accuracy: ", avg.accuracy))
# Find projection using annotated cells
u1 <- umap(train.data[,-class.col.idx], y = train.data[, class.col.idx], scale = TRUE, ret_model = TRUE, n_neighbors = n.neighbours, n_components = n.components)
# Find projection using annotated cells
u1 <- umap(train.data[,-class.col.idx], y = train.data[, class.col.idx], scale = TRUE, ret_model = TRUE, n_neighbors = n.neighbours, n_components = n.components)
# Project the whole data set in the new space
u2 <- umap_transform(data[,-class.col.idx], u1)
# Make a data frame for use with ggplot
df <- cbind(as.data.frame(u2), Morphology = data$Morphology)
u1
# Make unannotated points semi-transparent in plot
is.annotated <- df$Morphology %in% classes
is.annotated
a <- rep(1, length(df$Morphology)) # alpha level for each data point
a[!is.annotated] <- 0.3 # set alpha level of unannotated points
# Reorder the levels so that "Not annotated" appears last in the legend
Morphology <- factor(df$Morphology, levels = c(classes, "Not annotated"))
Morphology
# Set colour scheme
colours <- brewer.pal(length(classes), "Paired")
colours[length(classes)+1] <- "grey"
names(colours) <- levels(Morphology)
df
df[,1:n.components]
df
df
library(readxl)
library(stringr)
# Fix the random number generation to make things reproducible
# However UMAP outputs are not deterministic between computers as explained here:
# https://github.com/jlmelville/uwot#a-note-on-reproducibility
set.seed(202108)
# Where to write the results
output.dir = "~/software/microglia_morphology/output"
dir.create(output.dir, recursive = TRUE)
# Where the data files are
# All files must have the same columns in the same order and be in the same directory.
data.dir <- "~/software/microglia_morphology/data/feature_tables/"
# Save all data as a single data table into this file
data.file <- "data_table.txt"
# Names of the morphology classes of interest
classes <- c("Round", "Inflamed_Ameboid", "Fried_egg", "Inflamed_Fried_egg", "Hypertrophic", "Inflamed_Hypertrophic", "Bipolar")
# Names of the features we're going to work with
feat.to.keep <- c("Morphology", "Centroid_Time_Frames","Area_Pixel2", "BrightestPointToCentroidDistance_Pixel", "ConvexArea_Pixel2", "EllipsoidLongestAxisRadius_Pixel", "EllipsoidShortestAxisRadius_Pixel", "GeodesicDiameter_Pixel", "LargestInscribedCircleRadius_Pixel", "Perimeter_Pixel", "RadiusAtBrightestPoint_Pixel", "SkeletonAvgBranchLength_Pixel", "SkeletonLongestBranchLength_Pixel", "SkeletonTotalLength_Pixel", "SkeletonNumBranchPoints", "Solidity", "Roundness", "Roundness2", "GeodesicElongation", "AspectRatio", "Circularity", "Somaness", "Branchiness", "Straightness", "Thickness")
# List which treatment was applied where
# This must be a tab-delimited file with header and three columns:
# plate/culture ID, well ID, treatment
treatment.info.file <- "./data/treatment_info.txt"
#### Utility functions ####
# Compute new features and add them to the input data frame
compute_derived_features <- function(df) {
df$Solidity <- df$Area_Pixel2 / df$ConvexArea_Pixel2
df$Roundness <- df$Area_Pixel2 / df$EllipsoidLongestAxisRadius_Pixel^2
df$Roundness2 <- df$Area_Pixel2 / df$EllipsoidShortestAxisRadius_Pixel^2
df$GeodesicElongation <- df$GeodesicDiameter_Pixel^2 / df$Area_Pixel2
df$AspectRatio <- df$LargestInscribedCircleRadius_Pixel^2 / df$Area_Pixel2
df$Circularity <- df$Area_Pixel2 / df$Perimeter_Pixel^2
df$Somaness <- df$RadiusAtBrightestPoint_Pixel^2 / df$Area_Pixel2
df$Branchiness <- df$SkeletonNumBranchPoints / df$GeodesicDiameter_Pixel
df$Straightness <- df$SkeletonLongestBranchLength_Pixel^2 / df$Area_Pixel2
df$Thickness <- df$Area_Pixel2 / df$SkeletonTotalLength_Pixel^2
return(df)
}
# Data clean up:
# - Remove empty rows
# - Remove duplicated cells
# - Remove cells touching the image border
# - Remove cells not annotated with expected terms
clean_up <- function(df) {
# Remove empty rows
df <- df[df$Object_Label!="",]
# Remove duplicated cells
duplicates <- duplicated(df[,c("Centroid_Time_Frames", "BrightestPoint_X_Pixel", "BrightestPoint_Y_Pixel", "Path_Intensities")])
if(any(duplicates)) {
warning(paste0("Removing duplicates in ", paste(unique(df$Path_Intensities[duplicates]), collapse = ", "), "\n"))
df <- df[!duplicates,]
}
# Remove cells that significantly touch the image border
# A cell touches the border if the number of pixels on the border is more than 1% of its perimeter
excluded.cells <- which(df$ImageBoundaryContact_Pixel>0.01*df$Perimeter_Pixel)
if(length(excluded.cells)>0){
df <- df[-excluded.cells,]
}
# Remove unexpected annotations
df$Morphology[is.na(df$Morphology)] <- 'Not annotated' # NA -> not annotated
idx <- which(!(df$Morphology %in% c(classes, 'Not annotated')))
if(length(idx)>0) { # Cells with unexpected terms are considered not annotated
df$Morphology[idx] <- 'Not annotated'
}
return(df)
}
# Read treatment info
info <- read.delim(treatment.info.file, header = TRUE, sep = '\t')
# Remove empty rows
info <- info[!apply(is.na(info) | info == "", 1, all),]
info <- split(info, info$Treatment)
controls <- paste0(info$Control[,1], '_', info$Control[,2])
nmda <- paste0(info$NMDA[,1], '_', info$NMDA[,2])
lps <- paste0(info$'NMDA+LPS'[,1], '_', info$'NMDA+LPS'[,2])
# Read the multiple data files
# This will read all csv/txt files in the data.dir
file.list <- list.files(data.dir, pattern = ".*\\.(csv|txt)$", full.names = TRUE, recursive = FALSE)
data <- NULL
# Collect data for all the experiments
for(i in 1:length(file.list)) {
ID <- file.list[i]
df <- read.table(file.list[i], sep = "\t", header = TRUE, stringsAsFactors = FALSE)
df <- df[!is.na(df$Object_Label),]
if(i == 1) {
data <- df
} else {
clns <- colnames(df)[which(!(colnames(df) %in% colnames(data)))]
if(length(clns)>0) {
stop(paste0("File ", file.list[i], " has different column names than previous data files.\n Check the following column(s): ", clns, "\n"))
}
clns2 <-  colnames(data)[which(!colnames(data) %in% colnames(df))]
if(length(clns2)>0) {
warning(paste0("File ", file.list[i], " is missing the following column(s): ", paste(clns2, collapse = ", "), "\nFilling missing columns with NA.\n"))
df[,clns2] <- NA
}
data <- rbind(data, df)
}
}
# Make annotation column last
data <- data[, c(which(colnames(data) != "Morphology"), which(colnames(data) == "Morphology"))]
# Fix a few things
data <- clean_up(data)
# Compute derived features
data <- compute_derived_features(data)
# Save all data as one file including derived features
write.table(data, file = file.path(output.dir, data.file), sep = "\t", quote = FALSE, col.names = TRUE, row.names = FALSE)
# Save all data as one file including derived features
write.table(data, file = file.path(output.dir, data.file), sep = "\t", quote = FALSE, col.names = TRUE, row.names = FALSE)
# Get annotated training data
train.data <- data[which(data$Morphology %in% classes),]
train.data$Morphology <- as.factor(train.data$Morphology)
train.data <- droplevels(train.data)
# Take only the first time frame except for annotated cells which can be at other time points
data <- data[data$Centroid_Time_Frames == 1 | data$Morphology!='Not annotated',]
feat.to.keep <- feat.to.keep[feat.to.keep!='Centroid_Time_Frames']
# Factors we will look at later
source <- data$Path_Intensities
culture <- as.factor(str_match(source, "MAX_(pg\\d+?)[_-]")[,2])
treatment <- str_match(source, "MAX_(pg\\d+?[_-].*?)8h")[,2]
treatment[treatment %in% controls] <- "Control"
treatment[treatment %in% nmda] <- "NMDA"
treatment[treatment %in% lps] <- "NMDA+LPS"
treatment[!(treatment %in% c("Control", "NMDA", "NMDA+LPS"))] <- NA
treatment <- as.factor(treatment)
# Discard non-feature data (but keep class column)
data <- data[,feat.to.keep]
train.data <- train.data[,feat.to.keep]
# Index of the class column
class.col.idx <- which(colnames(data)=="Morphology")
data
data %>% as_tibble()
library(tidyverse)
data %>% as_tibble()
data %>% as_tibble() %>% colnames()
data[,-class.col.idx]
data[,-class.col.idx] %>% as_tibble()
data[,-class.col.idx] %>% as_tibble() %>% colnames()
data %>% as_tibble() %>% colnames()
class.col.idx
data
data %>% as_tibble()
data %>% as_tibble() %>% colnames()
data %>% as_tibble()
data[,-class.col.idx] %>% as_tibble()
data %>% as_tibble() %>% colnames()
data[,-class.col.idx] %>% as_tibble() %>% colnames()
data[,-class.col.idx] %>% as_tibble() %>% colnames() %>% write_csv("/Users/jalil/phd/PhD/Psilantro/Sudmex_alcohol_stress/Data/Inmunofluorescence/metrics4UMAP.txt")
data[,-class.col.idx] %>% as_tibble() %>% colnames() %>% write.table("/Users/jalil/phd/PhD/Psilantro/Sudmex_alcohol_stress/Data/Inmunofluorescence/metrics4UMAP.txt")
data[,-class.col.idx] %>% as_tibble() %>% colnames() %>% write.table("/Users/jalil/phd/PhD/Psilantro/Sudmex_alcohol_stress/Data/Inmunofluorescence/metrics4UMAP.txt", row.names = FALSE, quote = FALSE)
u
library(uwot)
library(scales)
library(ggplot2)
library(RColorBrewer)
dir.create(file.path(output.dir,"unsupervised"))
n.neighbours <- 15
n.components <- 2
u <- umap(data[,-class.col.idx], scale = TRUE, n_neighbors = n.neighbours, n_components = n.components)
df <- cbind(as.data.frame(u), Morphology = data$Morphology)
df
# Make unannotated points semi-transparent in plot
is.annotated <- df$Morphology %in% classes
a <- rep(1, length(df$Morphology)) # alpha level for each data point
a[!is.annotated] <- 0.2 # set alpha level of unannotated points
# Reorder the levels so that "Not annotated" appears last in the legend
Morphology <- factor(df$Morphology, levels = c(classes, "Not annotated"))
# Set colour scheme
colours <- brewer.pal(length(classes), "Paired")
colours[length(classes)+1] <- "grey"
names(colours) <- levels(Morphology)
# Plot all data points, highlighting annotations
# pdf(file.path(output.dir, "unsupervised", "UMAP_unsupervised-morphology.pdf"))
# Output tiff file for paper
tiff(file.path(output.dir,"unsupervised","UMAP_unsupervised-morphology.tiff"), width = 7, height = 7, units = "in", res = 600, compression = "lzw")
ggplot(df,aes(x=V1, y=V2, color = Morphology)) +  geom_point(alpha = a) + scale_color_manual(values=colours, breaks = levels(Morphology))
ggplot(df,aes(x=V1, y=V2, color = Morphology)) +  geom_point(alpha = a) + scale_color_manual(values=colours, breaks = levels(Morphology))
dev.off()
# Check distribution of factors of interest
df <- cbind(df, treatment, culture)
# Check distribution of factors of interest
df <- cbind(df, treatment, culture)
pdf(file.path(output.dir, "unsupervised", "UMAP_unsupervised-treatment.pdf"))
ggplot(df,aes(x=V1, y=V2, color = treatment)) +  geom_point(alpha = 0.5)
library(uwot)
library(dbscan)
library(scales)
library(ggplot2)
library(reshape2)
library(RColorBrewer)
library(caret)
dir.create(file.path(output.dir,"supervised"))
# Evaluate classifier performance with cross-validation
nfolds <- 5
train.idx <- createDataPartition(y = train.data$Morphology, p = 0.5, times = nfolds)
avg.accuracy <- 0
for(i in 1:length(train.idx)) {
training <- train.data[train.idx[[i]],]
testing <- train.data[-train.idx[[i]],]
# Find projection using training set
u1 <- umap(train.data[,-class.col.idx], y = train.data[, class.col.idx], scale = TRUE, ret_model = TRUE, n_neighbors = n.neighbours, n_components = n.components)
# Project the all annotated data in the new space
u2 <- umap_transform(train.data[,-class.col.idx], u1)
# Extract clusters in UMAP space
dbr <- hdbscan(u2, minPts = n.neighbours)
clusters <- factor(dbr$cluster)
annotations <- train.data$Morphology
noise.idx <- which(dbr$cluster == 0)
if(length(noise.idx)>0) {
clusters <- droplevels(clusters[-noise.idx])
annotations <- annotations[-noise.idx]
df <- df[-noise.idx,]
}
# Find dominant class in each cluster
tb <- table(cluster = clusters, annotations)
levels(clusters) <- colnames(tb)[apply(tb, 1, which.max)]
confusion.matrix <- confusionMatrix(clusters, annotations)
avg.accuracy <- avg.accuracy + confusion.matrix$overall[['Accuracy']]
}
avg.accuracy <- avg.accuracy / nfolds
avg.accuracy <- avg.accuracy / nfolds
print(paste0("Average accuracy: ", avg.accuracy))
train.data[,-class.col.idx]
train.data[,-class.col.idx] %>% as_tibble()
train.data[,-class.col.idx] %>% as_tibble() %>% colnames()
# Find projection using annotated cells
u1 <- umap(train.data[,-class.col.idx], y = train.data[, class.col.idx], scale = TRUE, ret_model = TRUE, n_neighbors = n.neighbours, n_components = n.components)
u1
u1 %>% as_tibble()
as.data.frame(u1)
umap(train.data[,-class.col.idx], y = train.data[, class.col.idx], scale = TRUE, n_neighbors = n.neighbours, n_components = n.components) %>% as.data.frame()
u1
u2
u2 %>% as_tibble()
# Project the whole data set in the new space
u2 <- umap_transform(data[,-class.col.idx], u1)
u2 %>% as_tibble()
str(u1)
df
setwd("/Users/jalil/phd/PhD/Psilantro/Sudmex_alcohol_stress/Data/Behavior/PLS_preparation/")
library(tidyverse)
library(magrittr)
data <- read_csv("Behavior_metrics4pls.csv") %>%
select(-Batch) %>%
#replace -0 with - in RID column
mutate(RID = str_replace_all(RID,"-0","-"))
files_names <- list.files("/Users/jalil/phd/PhD/Psilantro/Sudmex_alcohol_stress/Data/MRI/DBM/jacobians/") %>%
#keep only those who has "T3" in the name
keep(~ grepl("T3", .)) %>%
keep(~ grepl("nii.gz", .))
paste(colnames(data) %>% c() %>% noquote() %>% .[-c(1,2,4)],collapse = "','")
