library(shiny); runApp('convert2png.r')
runApp('convert2png.r')
runApp('convert2png.r')
library(magick)
library(shiny)
# Define the UI for folder selection
ui <- fluidPage(
fileInput("folder", "Select the folder containing SVG files"),
actionButton("convert", "Convert SVG to PNG")
)
# Define the server logic
server <- function(input, output) {
observeEvent(input$convert, {
# Get the path of the selected folder
svg_folder <- dirname(input$folder$datapath)
# Create a new folder for the PNGs in the same directory as the SVG folder
png_folder <- file.path(svg_folder, "png")
dir.create(png_folder, showWarnings = FALSE)
# Get the list of SVG files in the folder
svg_files <- list.files(svg_folder, pattern = "\\.svg$", full.names = TRUE)
# Loop through each SVG file
for (svg_file in svg_files) {
# Read the SVG image
svg_image <- image_read(svg_file)
# Remove the background
svg_image <- image_background(svg_image, "none")
# Convert the SVG image to PNG format
png_image <- image_convert(svg_image, format = "png")
# Get the file name without extension
file_name <- tools::file_path_sans_ext(basename(svg_file))
# Set the path for the output PNG file
png_file <- file.path(png_folder, paste0(file_name, ".png"))
# Save the PNG image
image_write(png_image, path = png_file)
}
# Print a message when the conversion is complete
cat("SVG to PNG conversion complete!\n")
})
}
# Run the Shiny app
shinyApp(ui, server)
